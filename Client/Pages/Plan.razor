@page "/plan/{id?}"
@using PlanIt.Client.Data
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject ICommunicationService CommunicationService
@inject ILocalStorageService localStorage
@inject ICookie cookies
@implements IAsyncDisposable
@inject IJSRuntime jsRuntime

<PageTitle>Plan</PageTitle>
<style>
    .card {
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
        transition: 0.3s;
        width: 40%;
    }

    .parent-div {
        padding: 5px !important;
        display: flex !important;
        flex-direction: column !important;
        align-content: center !important;
        justify-content: center !important;
        align-items: center !important;
        font-size: large !important;
    }

    .card:hover {
        box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);
    }

    .card {
        background: #e3e3e3;
        height: 90px !important;
        width: 70px !important;
        display: flex;
        flex-wrap: nowrap;
        justify-content: center;
        align-items: center;
        border-radius: 3px !important;
        font-size: xx-large;
        cursor: pointer !important;
        border-radius: 5px !IMPORTANT;
        text-align: center;
    }

    .card-selected {
        background: #4c4cd9 !important;
        color: white !important;
        height: 110px !important;
    }

    .hover-blue:hover {
        box-shadow: 0 8px 16px 0 rgb(58 6 71);
        color: rgb(48 45 255) !important;
    }

    .selected-value {
        background: #4c4cd9b5 !important;
        width: 100%;
        height: 100%;
        display: flex;
        border-radius: 5px !IMPORTANT;
        flex-wrap: nowrap;
        align-content: center;
        justify-content: center;
        align-items: center;
    }

    *, ::after, ::before {
        box-sizing: border-box;
    }

    .card-selected:hover {
        color: white !important;
    }
</style>

<main>
    <div class="top-row px-4">
        <a href="/" target="_blank">@username</a>
    </div>

    <article class="content px-4" style="
    display: flex;
    flex-wrap: nowrap;
    align-content: center;
    justify-content: space-around;
    align-items: center;
">
        <div style="display: flex;
    flex-direction: column;
    justify-content: center;
    width: 100%;">
            <div class="form-group mb-5">
                Share Link With Team.
                <button @onclick="@(()=>CopyTextToClipboard())" class="btn btn-primary">Copy Link</button>
            </div>
            <div style="display: flex;">
                @foreach (var u in users)
                {


                    <div class="parent-div">
                        <div class="card ">
                            <div class="@(u.SelectedValue>0 || !Revealed?"selected-value":"")"> @(u.SelectedValue==0 || !Revealed?"":u.SelectedValue.ToString())</div>
                        </div>
                        <b>@u.Name</b>
                    </div>

                }
            </div>
            <div class="form-group mb-5">
                <button @onclick="Reveal" class="btn btn-primary" disabled="@(!CommunicationService.IsConnected())">Reveal</button>
            </div>
        </div>
        <div style="display: flex;position: absolute;bottom: 0;">
            @if (Revealed)
            {
                foreach (var item in Result())
                {

                    <div class="parent-div">
                        <div class="card ">
                            <div class="selected-value"> @item.Key</div>
                        </div>
                        <b>@item.Value</b>
                    </div>
                }
                <div class="parent-div">
                    <div class="card ">
                        <div class="selected-value"> @users.Select(x=>x.SelectedValue).ToList().Average()</div>
                    </div>
                    <b>Avg</b>
                </div>
            }
            else
            {
                foreach (var n in numbers)
                {
                    <div class="parent-div">
                        @if (n == selectdNum)
                        {
                            <div class="card hover-blue card-selected" @onclick="_ => OnSelectChange(n)">
                                @n
                            </div>
                        }
                        else
                        {
                            <div class="card hover-blue" @onclick="_ => OnSelectChange(n)">
                                @n
                            </div>
                        }

                    </div>
                }
            }

        </div>
    </article>
</main>




@code {
    [Parameter]
    public string? id { get; set; }

    private List<int> numbers = new List<int>();
    private List<User> users = new List<User>();
    private List<int> messages = new List<int>();
    private string? userInput;
    public int? selectdNum = 0;
    private string? userId;
    private bool Revealed = false;

    protected override async Task OnInitializedAsync()
    {
        userId = await cookies.GetValue("userId");
        username = await localStorage.GetItem<string>("username");
        if (string.IsNullOrEmpty(username))
        {
            NavigationManager.NavigateTo($"/{id}", true);
        }

        if (!CommunicationService.IsConnected())
        {
            await CommunicationService.Initialize();
            await CommunicationService.Register(id, userId, username);
        }
        numbers = new List<int> { 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144 };

        CommunicationService.OnReveal(async yes =>
        {
            Revealed = yes;
            await InvokeAsync(StateHasChanged);

        });
        CommunicationService.OnRegister(async data =>
       {
           users = data;
           await InvokeAsync(StateHasChanged);

       });
    }
    public Dictionary<int, int> Result()
    {
        var occ = new Dictionary<int, int>();
        var numbers = users.Select(x => x.SelectedValue).ToList();
        var distinctNumbers = numbers.Distinct().ToList();
        distinctNumbers.ForEach(x =>
        {
            occ.Add(x, numbers.Count(n => n == x));
        });
        return occ;
    }
    private void ResetView()
    {
        StateHasChanged();
    }
    private async Task Send()
    {

        await CommunicationService.Select(id, userId, selectdNum.Value);
    }
    private async ValueTask CopyTextToClipboard()
    {
        var Text = NavigationManager.BaseUri;
        await jsRuntime.InvokeVoidAsync("copyToClipboard", Text + id);
    }
    private async Task Reveal()
    {

        await CommunicationService.Reveal(id);
    }


    public async Task OnSelectChange(int number)
    {
        selectdNum = number;
        await CommunicationService.Select(id,userId, selectdNum.Value);
        StateHasChanged();
    }
    string username = string.Empty;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            username = await localStorage.GetItem<string>("username");
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async ValueTask DisposeAsync()
    {

    }
}

