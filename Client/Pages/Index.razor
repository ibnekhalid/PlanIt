@page "/{id?}"
@using PlanIt.Client.Data
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject ICommunicationService CommunicationService
@inject ILocalStorageService localStorage
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>
<main>
    <div class="top-row px-4">
        <a href="/" target="_blank">@username</a>
    </div>

    <article class="content px-4" style="
    display: flex;
    flex-wrap: nowrap;
    align-content: center;
    justify-content: space-around;
    align-items: center;
">
        <div class="form-group mb-5">
            <label>
                User:
                <input @bind="userInput" class="form-control form-control" />
                <button @onclick="Send" class="btn btn-primary" disabled="@(!CommunicationService.IsConnected())">Go</button>
            </label>
        </div>


        <hr>

    </article>
</main>




@code {
    [Parameter]
    public string? id { get; set; }
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        
        if (string.IsNullOrEmpty(id))
        {
            id = Guid.NewGuid().ToString();
            NavigationManager.NavigateTo($"./{id}", true);
        }
        await CommunicationService.Initialize();
        StateHasChanged();

    }

    private async Task Send()
    {
        await localStorage.SetItem<string>("username",userInput);
        await CommunicationService.Register(id, userInput);
        NavigationManager.NavigateTo($"/plan/{id}", true);
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {

    }
        string username = string.Empty;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
       
        if (firstRender)
        {
             username = await localStorage.GetItem<string>("username");
             if (!string.IsNullOrEmpty(username)) NavigationManager.NavigateTo($"/plan/{id}", true);
         StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
